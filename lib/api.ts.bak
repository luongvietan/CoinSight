import type { Transaction } from "@/types/transaction";
import type { Budget } from "@/types/budget";
import type { Goal } from "@/types/goal";
import type { RecurringTransaction } from "@/types/recurring-transaction";
import { auth } from "@/lib/firebase/config";
import {
  collection,
  query,
  where,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  getDoc,
  orderBy,
  limit,
  Timestamp,
  serverTimestamp,
} from "firebase/firestore";
import { db } from "@/lib/firebase/config";

// Fetch transactions from Firestore
export async function fetchTransactions(): Promise<Transaction[]> {
  try {
    const user = auth.currentUser;
    if (!user) {
      console.warn("Người dùng chưa đăng nhập");
      return []; // Trả về mảng rỗng thay vì ném lỗi
    }

    // Đơn giản hóa truy vấn để tránh vấn đề về chỉ mục
    const q = query(
      collection(db, "transactions"),
      where("userId", "==", user.uid)
      // Bỏ orderBy để tránh lỗi chỉ mục composite
    );

    const querySnapshot = await getDocs(q);
    const transactions: Transaction[] = [];

    querySnapshot.forEach((doc) => {
      const data = doc.data();
      // Chuyển Timestamp về Date
      const date =
        data.date instanceof Timestamp
          ? data.date.toDate()
          : new Date(data.date);
      const formattedDate = date.toISOString().split("T")[0]; // Format YYYY-MM-DD

      transactions.push({
        id: doc.id,
        description: data.description,
        amount: data.amount,
        category: data.category,
        date: formattedDate,
      });
    });

    // Sắp xếp phía client thay vì trên Firestore
    return transactions.sort(
      (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
    );
  } catch (error) {
    console.error("Lỗi khi lấy giao dịch:", error);
    return []; // Trả về mảng rỗng thay vì ném lỗi
  }
}

// Add a new transaction
export async function addTransaction(
  transaction: Omit<Transaction, "id">
): Promise<Transaction> {
  try {
    const user = auth.currentUser;
    if (!user) {
      throw new Error("Người dùng chưa đăng nhập");
    }

    const transactionData = {
      userId: user.uid,
      description: transaction.description,
      amount: transaction.amount,
      category: transaction.category,
      date: Timestamp.fromDate(new Date(transaction.date)),
      createdAt: serverTimestamp(),
    };

    const docRef = await addDoc(
      collection(db, "transactions"),
      transactionData
    );

    // Trả về đối tượng giao dịch hoàn chỉnh với ID mới
    return {
      id: docRef.id,
      description: transaction.description,
      amount: transaction.amount,
      category: transaction.category,
      date: transaction.date,
    };
  } catch (error) {
    console.error("Lỗi khi thêm giao dịch:", error);
    throw error;
  }
}

// Update a transaction
export async function updateTransaction(
  id: string,
  transaction: Partial<Transaction>
): Promise<Transaction> {
  try {
    const user = auth.currentUser;
    if (!user) {
      throw new Error("Người dùng chưa đăng nhập");
    }

    const transactionRef = doc(db, "transactions", id);
    const transactionSnapshot = await getDoc(transactionRef);

    if (!transactionSnapshot.exists()) {
      throw new Error("Giao dịch không tồn tại");
    }

    const currentData = transactionSnapshot.data();
    if (currentData.userId !== user.uid) {
      throw new Error("Không có quyền cập nhật giao dịch này");
    }

    const updateData: any = {};
    if (transaction.description)
      updateData.description = transaction.description;
    if (transaction.amount) updateData.amount = transaction.amount;
    if (transaction.category) updateData.category = transaction.category;
    if (transaction.date)
      updateData.date = Timestamp.fromDate(new Date(transaction.date));

    await updateDoc(transactionRef, updateData);

    // Lấy dữ liệu cập nhật để trả về
    const updatedSnapshot = await getDoc(transactionRef);
    const updatedData = updatedSnapshot.data();

    if (!updatedData) {
      throw new Error("Không thể lấy dữ liệu đã cập nhật");
    }

    return {
      id,
      description: updatedData.description,
      amount: updatedData.amount,
      category: updatedData.category,
      date: updatedData?.date?.toDate().toISOString().split("T")[0] || "",
    };
  } catch (error) {
    console.error("Lỗi khi cập nhật giao dịch:", error);
    throw error;
  }
}

// Delete a transaction
export async function deleteTransaction(id: string): Promise<void> {
  try {
    const user = auth.currentUser;
    if (!user) {
      throw new Error("Người dùng chưa đăng nhập");
    }

    const transactionRef = doc(db, "transactions", id);
    const transactionSnapshot = await getDoc(transactionRef);

    if (!transactionSnapshot.exists()) {
      throw new Error("Giao dịch không tồn tại");
    }

    const data = transactionSnapshot.data();
    if (data.userId !== user.uid) {
      throw new Error("Không có quyền xóa giao dịch này");
    }

    await deleteDoc(transactionRef);
  } catch (error) {
    console.error("Lỗi khi xóa giao dịch:", error);
    throw error;
  }
}

// Fetch budgets from Firestore
export async function fetchBudgets(): Promise<Budget[]> {
  try {
    const user = auth.currentUser;
    if (!user) {
      console.warn("Người dùng chưa đăng nhập");
      return []; // Trả về mảng rỗng thay vì ném lỗi
    }

    // Đơn giản hóa truy vấn
    const q = query(collection(db, "budgets"), where("userId", "==", user.uid));

    const querySnapshot = await getDocs(q);
    const budgets: Budget[] = [];

    querySnapshot.forEach((doc) => {
      const data = doc.data();
      budgets.push({
        id: doc.id,
        userId: data.userId,
        category: data.category,
        limit: data.limit || 0,
        period: data.period || "monthly",
        amount: 0,
      });
    });

    return budgets;
  } catch (error) {
    console.error("Lỗi khi lấy ngân sách:", error);
    return []; // Trả về mảng rỗng thay vì ném lỗi
  }
}

// Get transaction statistics
export async function getTransactionStats() {
  try {
    const transactions = await fetchTransactions();

    // Tính tổng thu nhập
    const income = transactions
      .filter((t) => t.amount > 0)
      .reduce((sum, t) => sum + t.amount, 0);

    // Tính tổng chi tiêu
    const expenses = transactions
      .filter((t) => t.amount < 0)
      .reduce((sum, t) => sum + Math.abs(t.amount), 0);

    // Thống kê theo danh mục
    const categoryStats = transactions.reduce((stats, t) => {
      const category = t.category;
      if (!stats[category]) {
        stats[category] = 0;
      }
      stats[category] += t.amount < 0 ? Math.abs(t.amount) : 0;
      return stats;
    }, {} as Record<string, number>);

    return {
      income,
      expenses,
      balance: income - expenses,
      categoryStats,
    };
  } catch (error) {
    console.error("Lỗi khi lấy thống kê giao dịch:", error);
    throw error;
  }
}

// Get financial goals
export async function getGoals(): Promise<Goal[]> {
  try {
    const user = auth.currentUser;
    if (!user) {
      console.warn("Người dùng chưa đăng nhập");
      return []; // Trả về mảng rỗng thay vì ném lỗi
    }

    // Đơn giản hóa truy vấn
    const q = query(collection(db, "goals"), where("userId", "==", user.uid));

    const querySnapshot = await getDocs(q);
    const goals: Goal[] = [];

    querySnapshot.forEach((doc) => {
      const data = doc.data();
      goals.push({
        id: doc.id,
        name: data.name,
        category: data.category,
        targetAmount: data.targetAmount,
        currentAmount: data.currentAmount,
        deadline:
          data.deadline instanceof Timestamp
            ? data.deadline.toDate().toISOString().split("T")[0]
            : data.deadline,
      });
    });

    return goals;
  } catch (error) {
    console.error("Lỗi khi lấy mục tiêu tài chính:", error);
    return []; // Trả về mảng rỗng thay vì ném lỗi
  }
}

// Add a new financial goal
export async function addGoal(goal: Omit<Goal, "id">): Promise<Goal> {
  try {
    const user = auth.currentUser;
    if (!user) {
      throw new Error("Người dùng chưa đăng nhập");
    }

    const goalData = {
      userId: user.uid,
      name: goal.name,
      category: goal.category,
      targetAmount: goal.targetAmount,
      currentAmount: goal.currentAmount,
      deadline: goal.deadline ? new Date(goal.deadline) : null,
      createdAt: serverTimestamp(),
    };

    const docRef = await addDoc(collection(db, "goals"), goalData);

    // Trả về đối tượng mục tiêu hoàn chỉnh với ID mới
    return {
      id: docRef.id,
      name: goal.name,
      category: goal.category,
      targetAmount: goal.targetAmount,
      currentAmount: goal.currentAmount,
      deadline: goal.deadline,
    };
  } catch (error) {
    console.error("Lỗi khi thêm mục tiêu tài chính:", error);
    throw error;
  }
}

// Update a financial goal
export async function updateGoal(
  id: string,
  goal: Partial<Goal>
): Promise<Goal> {
  try {
    const user = auth.currentUser;
    if (!user) {
      throw new Error("Người dùng chưa đăng nhập");
    }

    const goalRef = doc(db, "goals", id);
    const goalSnapshot = await getDoc(goalRef);

    if (!goalSnapshot.exists()) {
      throw new Error("Mục tiêu tài chính không tồn tại");
    }

    const currentData = goalSnapshot.data();
    if (currentData.userId !== user.uid) {
      throw new Error("Không có quyền cập nhật mục tiêu này");
    }

    const updateData: any = {};
    if (goal.name) updateData.name = goal.name;
    if (goal.category) updateData.category = goal.category;
    if (goal.targetAmount !== undefined)
      updateData.targetAmount = goal.targetAmount;
    if (goal.currentAmount !== undefined)
      updateData.currentAmount = goal.currentAmount;
    if (goal.deadline) updateData.deadline = new Date(goal.deadline);

    await updateDoc(goalRef, updateData);

    // Lấy dữ liệu cập nhật để trả về
    const updatedSnapshot = await getDoc(goalRef);
    const updatedData = updatedSnapshot.data();
    if (!updatedData) {
      throw new Error("Dữ liệu cập nhật không tồn tại");
    }

    return {
      id,
      name: updatedData.name,
      category: updatedData.category,
      targetAmount: updatedData.targetAmount,
      currentAmount: updatedData.currentAmount,
      deadline:
        updatedData.deadline instanceof Timestamp
          ? updatedData.deadline.toDate().toISOString().split("T")[0]
          : updatedData.deadline,
    };
  } catch (error) {
    console.error("Lỗi khi cập nhật mục tiêu tài chính:", error);
    throw error;
  }
}

// Delete a financial goal
export async function deleteGoal(id: string): Promise<void> {
  try {
    const user = auth.currentUser;
    if (!user) {
      throw new Error("Người dùng chưa đăng nhập");
    }

    const goalRef = doc(db, "goals", id);
    const goalSnapshot = await getDoc(goalRef);

    if (!goalSnapshot.exists()) {
      throw new Error("Mục tiêu tài chính không tồn tại");
    }

    const data = goalSnapshot.data();
    if (data.userId !== user.uid) {
      throw new Error("Không có quyền xóa mục tiêu này");
    }

    await deleteDoc(goalRef);
  } catch (error) {
    console.error("Lỗi khi xóa mục tiêu tài chính:", error);
    throw error;
  }
}

// Get recurring transactions
export async function getRecurringTransactions(): Promise<
  RecurringTransaction[]
> {
  try {
    const user = auth.currentUser;
    if (!user) {
      console.warn("Người dùng chưa đăng nhập");
      return []; // Trả về mảng rỗng thay vì ném lỗi
    }

    // Đơn giản hóa truy vấn để tránh lỗi chỉ mục và quyền truy cập
    const q = query(
      collection(db, "recurring_transactions"),
      where("userId", "==", user.uid)
      // Bỏ điều kiện isActive để đơn giản hóa truy vấn
    );

    const querySnapshot = await getDocs(q);
    const recurringTransactions: RecurringTransaction[] = [];

    querySnapshot.forEach((doc) => {
      const data = doc.data();
      // Chỉ lấy các giao dịch isActive
      if (data.isActive === true) {
        recurringTransactions.push({
          id: doc.id,
          description: data.description,
          amount: data.amount,
          category: data.category,
          frequency: data.frequency,
          nextDate:
            data.nextDate instanceof Timestamp
              ? data.nextDate.toDate().toISOString().split("T")[0]
              : data.nextDate,
          isActive: data.isActive,
        });
      }
    });

    return recurringTransactions;
  } catch (error) {
    console.error("Lỗi khi lấy giao dịch định kỳ:", error);
    return []; // Trả về mảng rỗng thay vì ném lỗi
  }
}

// Classify transaction using AI (mocked)
export async function classifyTransaction(
  description: string
): Promise<{ category: string }> {
  // Simulate API call to OpenAI
  return new Promise((resolve) => {
    setTimeout(() => {
      // Simple keyword matching for demo
      const lowerDesc = description.toLowerCase();

      if (
        lowerDesc.includes("coffee") ||
        lowerDesc.includes("starbucks") ||
        lowerDesc.includes("ăn") ||
        lowerDesc.includes("restaurant") ||
        lowerDesc.includes("lunch") ||
        lowerDesc.includes("dinner")
      ) {
        resolve({ category: "food" });
      } else if (
        lowerDesc.includes("grocery") ||
        lowerDesc.includes("supermarket") ||
        lowerDesc.includes("thực phẩm")
      ) {
        resolve({ category: "groceries" });
      } else if (
        lowerDesc.includes("quần") ||
        lowerDesc.includes("áo") ||
        lowerDesc.includes("clothes") ||
        lowerDesc.includes("shirt") ||
        lowerDesc.includes("pants")
      ) {
        resolve({ category: "clothing" });
      } else if (
        lowerDesc.includes("laptop") ||
        lowerDesc.includes("phone") ||
        lowerDesc.includes("điện thoại") ||
        lowerDesc.includes("máy tính")
      ) {
        resolve({ category: "electronics" });
      } else if (
        lowerDesc.includes("điện") ||
        lowerDesc.includes("nước") ||
        lowerDesc.includes("bill") ||
        lowerDesc.includes("utility")
      ) {
        resolve({ category: "bills" });
      } else if (
        lowerDesc.includes("rent") ||
        lowerDesc.includes("thuê nhà") ||
        lowerDesc.includes("mortgage")
      ) {
        resolve({ category: "rent" });
      } else if (
        lowerDesc.includes("taxi") ||
        lowerDesc.includes("bus") ||
        lowerDesc.includes("train") ||
        lowerDesc.includes("xe")
      ) {
        resolve({ category: "transportation" });
      } else if (
        lowerDesc.includes("doctor") ||
        lowerDesc.includes("hospital") ||
        lowerDesc.includes("medicine") ||
        lowerDesc.includes("bệnh")
      ) {
        resolve({ category: "healthcare" });
      } else if (
        lowerDesc.includes("school") ||
        lowerDesc.includes("tuition") ||
        lowerDesc.includes("học")
      ) {
        resolve({ category: "education" });
      } else if (
        lowerDesc.includes("phim") ||
        lowerDesc.includes("game") ||
        lowerDesc.includes("chơi") ||
        lowerDesc.includes("movie")
      ) {
        resolve({ category: "entertainment" });
      } else if (
        lowerDesc.includes("travel") ||
        lowerDesc.includes("hotel") ||
        lowerDesc.includes("flight") ||
        lowerDesc.includes("du lịch")
      ) {
        resolve({ category: "travel" });
      } else if (
        lowerDesc.includes("gift") ||
        lowerDesc.includes("present") ||
        lowerDesc.includes("quà")
      ) {
        resolve({ category: "gifts" });
      } else if (
        lowerDesc.includes("gym") ||
        lowerDesc.includes("fitness") ||
        lowerDesc.includes("thể dục")
      ) {
        resolve({ category: "fitness" });
      } else if (
        lowerDesc.includes("netflix") ||
        lowerDesc.includes("spotify") ||
        lowerDesc.includes("subscription")
      ) {
        resolve({ category: "subscriptions" });
      } else if (lowerDesc.includes("salary") || lowerDesc.includes("lương")) {
        resolve({ category: "salary" });
      } else if (
        lowerDesc.includes("freelance") ||
        lowerDesc.includes("tự do")
      ) {
        resolve({ category: "freelance" });
      } else if (
        lowerDesc.includes("investment") ||
        lowerDesc.includes("stock") ||
        lowerDesc.includes("đầu tư")
      ) {
        resolve({ category: "investments" });
      } else if (
        lowerDesc.includes("mua") ||
        lowerDesc.includes("buy") ||
        lowerDesc.includes("purchase")
      ) {
        resolve({ category: "shopping" });
      } else {
        resolve({ category: "other" });
      }
    }, 500);
  });
}

// Get AI insights (mocked)
export async function getAiInsights(
  transactions: Transaction[]
): Promise<{ insights: string[] }> {
  // Simulate API call
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        insights: [
          "Bạn đã chi 40% thu nhập cho ăn uống - đề xuất giảm 10%",
          "Chi tiêu mua sắm tăng 15% so với tháng trước",
          "Bạn có thể tiết kiệm 500.000₫ bằng cách giảm chi phí giải trí",
        ],
      });
    }, 1500);
  });
}

// Get AI insights from Huggingface API
export async function getAiInsights(
  transactions: Transaction[]
): Promise<{ insights: string[] }> {
  try {
    // Không thực hiện API call nếu không có giao dịch
    if (!transactions || transactions.length === 0) {
      return { insights: [] };
    }

    // Phân tích và tổng hợp dữ liệu giao dịch
    const categories: Record<string, number> = {};
    const totalIncome = transactions
      .filter((t) => t.amount > 0)
      .reduce((sum, t) => sum + t.amount, 0);
    const totalExpense = transactions
      .filter((t) => t.amount < 0)
      .reduce((sum, t) => sum + Math.abs(t.amount), 0);

    // Phân tích chi tiêu theo danh mục
    transactions
      .filter((t) => t.amount < 0)
      .forEach((t) => {
        categories[t.category] =
          (categories[t.category] || 0) + Math.abs(t.amount);
      });

    // Tạo ra biểu đồ chi tiêu theo danh mục
    const categoryBreakdown = Object.entries(categories)
      .map(([category, amount]) => {
        const percentage = totalExpense > 0 ? (amount / totalExpense) * 100 : 0;
        return {
          category,
          amount,
          percentage: parseFloat(percentage.toFixed(1)),
        };
      })
      .sort((a, b) => b.percentage - a.percentage);

    // Tạo ra thông tin đầu vào cho Huggingface
    const prompt = `
Dựa trên dữ liệu tài chính sau đây, hãy cung cấp 3-5 nhận xét hữu ích về chi tiêu và tiết kiệm:

Tổng thu nhập: ${totalIncome.toLocaleString("vi-VN")}₫
Tổng chi tiêu: ${totalExpense.toLocaleString("vi-VN")}₫
Tỷ lệ chi tiêu/thu nhập: ${
      totalIncome > 0 ? ((totalExpense / totalIncome) * 100).toFixed(1) : 0
    }%

Chi tiêu theo danh mục (tỷ lệ phần trăm trên tổng chi tiêu):
${categoryBreakdown
  .map(
    (c) =>
      `- ${c.category}: ${c.amount.toLocaleString("vi-VN")}₫ (${c.percentage}%)`
  )
  .join("\n")}

Phân tích kỹ dữ liệu và đưa ra các lời khuyên cụ thể giúp người dùng quản lý tài chính tốt hơn.
Những lời khuyên nên bao gồm:
1. Nhận xét về các danh mục chi tiêu nhiều nhất
2. Cách tiết kiệm chi phí cho các danh mục lớn
3. Tỷ lệ chi tiêu/thu nhập hợp lý
4. Mẹo cụ thể để cải thiện tình hình tài chính

Kết quả trả về cần ngắn gọn, mỗi lời khuyên không quá 10-15 từ. Chỉ trả về danh sách lời khuyên, mỗi lời khuyên trên một dòng. KHÔNG bao gồm tiêu đề, đánh số hoặc bất kỳ nội dung giải thích nào khác.
`;

    // Gọi Huggingface API
    const API_URL =
      "https://api-inference.huggingface.co/models/meta-llama/Llama-2-70b-chat-hf";
    const response = await fetch(API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.HUGGINGFACE_API_KEY}`,
      },
      body: JSON.stringify({
        inputs: prompt,
        parameters: {
          max_new_tokens: 250,
          temperature: 0.7,
          top_p: 0.9,
          do_sample: true,
        },
      }),
    });

    if (!response.ok) {
      throw new Error(`API request failed with status ${response.status}`);
    }

    const data = await response.json();

    // Xử lý phản hồi từ Huggingface
    let aiResponse = "";
    if (Array.isArray(data)) {
      aiResponse = data[0].generated_text || "";
    } else {
      aiResponse = data.generated_text || "";
    }

    // Xử lý và làm sạch phản hồi để chỉ lấy các dòng có nội dung
    const insights = aiResponse
      .split("\n")
      .map((line) => line.trim())
      .filter(
        (line) =>
          line.length > 0 &&
          !line.startsWith("```") &&
          !line.includes("Dựa trên dữ liệu") &&
          !line.includes("Lời khuyên:")
      )
      .filter((_, index) => index < 5); // Giới hạn số lượng lời khuyên

    return {
      insights:
        insights.length > 0
          ? insights
          : [
              "Bạn đã chi 40% thu nhập cho ăn uống - đề xuất giảm 10%",
              "Chi tiêu mua sắm tăng 15% so với tháng trước",
              "Bạn có thể tiết kiệm 500.000₫ bằng cách giảm chi phí giải trí",
            ],
    };
  } catch (error) {
    console.error("Lỗi khi gọi Huggingface API:", error);
    // Trả về dữ liệu mẫu trong trường hợp lỗi
    return {
      insights: [
        "Bạn đã chi 40% thu nhập cho ăn uống - đề xuất giảm 10%",
        "Chi tiêu mua sắm tăng 15% so với tháng trước",
        "Bạn có thể tiết kiệm 500.000₫ bằng cách giảm chi phí giải trí",
      ],
    };
  }
}

// Add a new recurring transaction
export async function addRecurringTransaction(
  recurring: Omit<RecurringTransaction, "id">
): Promise<RecurringTransaction> {
  try {
    const user = auth.currentUser;
    if (!user) {
      throw new Error("Người dùng chưa đăng nhập");
    }

    const recurringData = {
      userId: user.uid,
      description: recurring.description,
      amount: recurring.amount,
      category: recurring.category,
      frequency: recurring.frequency,
      nextDate: Timestamp.fromDate(new Date(recurring.nextDate)),
      isActive: recurring.isActive,
      createdAt: serverTimestamp(),
    };

    const docRef = await addDoc(
      collection(db, "recurring_transactions"),
      recurringData
    );

    return {
      id: docRef.id,
      ...recurring,
    };
  } catch (error) {
    console.error("Lỗi khi thêm giao dịch định kỳ:", error);
    throw error;
  }
}

// Update a recurring transaction
export async function updateRecurringTransaction(
  recurring: RecurringTransaction
): Promise<void> {
  try {
    const user = auth.currentUser;
    if (!user) {
      throw new Error("Người dùng chưa đăng nhập");
    }

    const recurringRef = doc(db, "recurring_transactions", recurring.id);
    await updateDoc(recurringRef, {
      description: recurring.description,
      amount: recurring.amount,
      category: recurring.category,
      frequency: recurring.frequency,
      nextDate: Timestamp.fromDate(new Date(recurring.nextDate)),
      isActive: recurring.isActive,
      updatedAt: serverTimestamp(),
    });
  } catch (error) {
    console.error("Lỗi khi cập nhật giao dịch định kỳ:", error);
    throw error;
  }
}

// Delete a recurring transaction
export async function deleteRecurringTransaction(
  recurringId: string
): Promise<void> {
  try {
    const user = auth.currentUser;
    if (!user) {
      throw new Error("Người dùng chưa đăng nhập");
    }

    const recurringRef = doc(db, "recurring_transactions", recurringId);
    await deleteDoc(recurringRef);
  } catch (error) {
    console.error("Lỗi khi xóa giao dịch định kỳ:", error);
    throw error;
  }
}

// Process recurring transactions - check and create transactions based on scheduled dates
export async function processRecurringTransactions(): Promise<{
  processedCount: number;
  totalAmount: number;
  transactions: Array<{
    description: string;
    amount: number;
    date: string;
  }>;
}> {
  try {
    const user = auth.currentUser;
    if (!user) {
      console.warn("Người dùng chưa đăng nhập");
      return { processedCount: 0, totalAmount: 0, transactions: [] };
    }

    // Lấy tất cả giao dịch định kỳ và giao dịch thường
    const recurringTransactions = await getRecurringTransactions();
    const transactions = await fetchTransactions();

    const today = new Date();
    today.setHours(0, 0, 0, 0); // Reset time to start of day

    let processedCount = 0;
    let totalAmount = 0;
    const processedTransactions: Array<{
      description: string;
      amount: number;
      date: string;
    }> = [];

    for (const recurring of recurringTransactions) {
      if (!recurring.isActive) continue;

      const nextDate = new Date(recurring.nextDate);
      nextDate.setHours(0, 0, 0, 0); // Reset time to start of day

      // Kiểm tra nếu nextDate <= today (đã đến hoặc đã qua hạn)
      if (nextDate <= today) {
        const dateStr = nextDate.toISOString().split("T")[0];

        // Kiểm tra nếu giao dịch đã tồn tại (tránh trùng lặp)
        const transactionDescription = `${recurring.description} (Tự động)`;
        const isDuplicate = transactions.some(
          (t) =>
            t.description === transactionDescription &&
            t.amount === recurring.amount &&
            t.date === dateStr
        );

        if (!isDuplicate) {
          // Tạo giao dịch mới từ recurring transaction
          await addTransaction({
            description: transactionDescription,
            amount: recurring.amount,
            category: recurring.category,
            date: dateStr,
          });

          processedCount++;
          totalAmount += Math.abs(recurring.amount);
          processedTransactions.push({
            description: recurring.description,
            amount: recurring.amount,
            date: dateStr,
          });
        }

        // Tính toán ngày tiếp theo dựa trên tần suất
        let newNextDate = new Date(nextDate);

        switch (recurring.frequency) {
          case "daily":
            newNextDate.setDate(newNextDate.getDate() + 1);
            break;
          case "weekly":
            newNextDate.setDate(newNextDate.getDate() + 7);
            break;
          case "monthly":
            newNextDate.setMonth(newNextDate.getMonth() + 1);
            break;
          case "yearly":
            newNextDate.setFullYear(newNextDate.getFullYear() + 1);
            break;
        }

        // Cập nhật recurring transaction với ngày tiếp theo mới
        await updateDoc(doc(db, "recurring_transactions", recurring.id), {
          nextDate: Timestamp.fromDate(newNextDate),
          updatedAt: serverTimestamp(),
        });
      }
    }

    return {
      processedCount,
      totalAmount,
      transactions: processedTransactions,
    };
  } catch (error) {
    console.error("Lỗi khi xử lý giao dịch định kỳ:", error);
    return { processedCount: 0, totalAmount: 0, transactions: [] };
  }
}
