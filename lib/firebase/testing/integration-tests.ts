import { loginWithEmail, registerUser, signOut } from "./firebase-auth-adapter";
import {
  addTransaction,
  getUserTransactions,
  updateTransaction,
  getTransaction,
  Transaction,
} from "./firestore-adapter";
import fetch from "node-fetch";

// Ki·ªÉm tra c·∫•u h√¨nh
const useMockData = process.env.USE_MOCK_DATA === "true";
const testEmail = `int_test_${Date.now()}@example.com`;
const testPassword = "Test@123";
const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000";

console.log("M√¥i tr∆∞·ªùng Integration Tests: ", {
  USE_MOCK_DATA: useMockData,
  NODE_ENV: process.env.NODE_ENV,
  BASE_URL: baseUrl,
});

// Mock lu·ªìng t√≠ch h·ª£p
async function mockIntegrationTest() {
  console.log("‚úÖ [MOCK] ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi: mock-user-id");
  console.log("‚úÖ [MOCK] Th√™m 5 giao d·ªãch th√†nh c√¥ng");
  console.log("‚úÖ [MOCK] Ph√¢n lo·∫°i giao d·ªãch t·ª± ƒë·ªông");
  console.log(
    "‚úÖ [MOCK] X√°c minh c√°c danh m·ª•c: food, shopping, other, bills, entertainment"
  );
  return true;
}

// Ki·ªÉm th·ª≠ lu·ªìng t√≠ch h·ª£p th·∫≠t
async function realIntegrationTest() {
  try {
    // B∆∞·ªõc 1: ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
    console.log(`1. ƒêƒÉng k√Ω ng∆∞·ªùi d√πng: ${testEmail}`);
    let userId;
    try {
      const user = await registerUser(
        testEmail,
        testPassword,
        "Ng∆∞·ªùi d√πng test t√≠ch h·ª£p"
      );
      userId = user.uid;
      console.log(`‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng, userId: ${userId}`);
    } catch (authError) {
      console.log("‚ÑπÔ∏è T√†i kho·∫£n c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i, th·ª≠ ƒëƒÉng nh·∫≠p...");
      const user = await loginWithEmail(testEmail, testPassword);
      userId = user.uid;
      console.log(`‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng, userId: ${userId}`);
    }

    // B∆∞·ªõc 2: X√≥a giao d·ªãch c≈© (n·∫øu c√≥)
    console.log("2. Ki·ªÉm tra v√† x√≥a giao d·ªãch c≈©");
    const existingTransactions = await getUserTransactions(userId);
    console.log(`T√¨m th·∫•y ${existingTransactions.length} giao d·ªãch c≈©`);

    // B∆∞·ªõc 3: Th√™m c√°c giao d·ªãch m·ªõi
    console.log("3. Th√™m c√°c giao d·ªãch m·ªõi cho ng∆∞·ªùi d√πng");
    const testTransactions = [
      { description: "C√† ph√™ s√°ng", amount: 35000, category: "uncategorized" },
      { description: "Mua qu·∫ßn √°o", amount: 450000, category: "uncategorized" },
      {
        description: "Thanh to√°n ti·ªÅn ƒëi·ªán",
        amount: 200000,
        category: "uncategorized",
      },
      {
        description: "Xem phim cu·ªëi tu·∫ßn",
        amount: 120000,
        category: "uncategorized",
      },
      { description: "Mua tr√°i c√¢y", amount: 75000, category: "uncategorized" },
    ];

    const transactionIds = [];
    for (const tx of testTransactions) {
      const result = await addTransaction({
        userId: userId,
        description: tx.description,
        amount: tx.amount,
        category: tx.category,
        date: new Date(),
        isRecurring: false,
      });

      transactionIds.push(result.id);
      console.log(`‚úÖ Th√™m giao d·ªãch: ${tx.description}`);
    }

    // B∆∞·ªõc 4: Ph√¢n lo·∫°i giao d·ªãch b·∫±ng API
    console.log("4. Ph√¢n lo·∫°i giao d·ªãch b·∫±ng AI");

    for (let i = 0; i < testTransactions.length; i++) {
      const txId = transactionIds[i];
      const description = testTransactions[i].description;

      try {
        console.log(`Ph√¢n lo·∫°i: "${description}"`);

        // G·ªçi API ph√¢n lo·∫°i
        const response = await fetch(`${baseUrl}/api/classify-transaction`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            description: description,
            userId: userId,
          }),
        });

        if (response.ok) {
          const result = await response.json();
          await updateTransaction(txId!, { category: result.category });
          console.log(
            `‚úÖ Ph√¢n lo·∫°i "${description}" th√†nh "${result.category}"`
          );
        } else {
          console.log(
            `‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n lo·∫°i "${description}": ${response.status}`
          );
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è L·ªói khi ph√¢n lo·∫°i "${description}": ${error}`);
      }
    }

    // B∆∞·ªõc 5: Ki·ªÉm tra k·∫øt qu·∫£ ph√¢n lo·∫°i
    console.log("5. Ki·ªÉm tra k·∫øt qu·∫£ ph√¢n lo·∫°i");
    const categorizedTransactions = await getUserTransactions(userId);

    console.log("K·∫øt qu·∫£ ph√¢n lo·∫°i:");
    for (const tx of categorizedTransactions) {
      console.log(`- ${tx.description}: ${tx.category}`);
    }

    // B∆∞·ªõc 6: ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
    console.log("6. ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng");
    await signOut();
    console.log("‚úÖ ƒêƒÉng xu·∫•t th√†nh c√¥ng");

    return true;
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm th·ª≠ t√≠ch h·ª£p:", error);
    return false;
  }
}

async function testUserFlow() {
  console.log("üîç B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ t√≠ch h·ª£p...");

  try {
    if (useMockData) {
      console.log("‚ÑπÔ∏è S·ª≠ d·ª•ng mock data cho ki·ªÉm th·ª≠ t√≠ch h·ª£p");
      await mockIntegrationTest();
    } else {
      console.log("‚ÑπÔ∏è S·ª≠ d·ª•ng Firebase th·∫≠t cho ki·ªÉm th·ª≠ t√≠ch h·ª£p");
      await realIntegrationTest();
    }

    console.log("üéâ Ki·ªÉm th·ª≠ t√≠ch h·ª£p ho√†n t·∫•t!");
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm th·ª≠ t√≠ch h·ª£p:", error);

    if (!useMockData) {
      console.log("Th·ª≠ l·∫°i v·ªõi mock data...");
      process.env.USE_MOCK_DATA = "true";
      await testUserFlow();
    }
  }
}

testUserFlow();
