import {
  addTransaction,
  getTransaction,
  getUserTransactions,
  updateTransaction,
  deleteTransaction,
  Transaction,
} from "./firestore-adapter";
import { loginWithEmail, registerUser } from "./firebase-auth-adapter";

// Ki·ªÉm tra c·∫•u h√¨nh
const useMockData = process.env.USE_MOCK_DATA === "true";
const testEmail = `firestore_test_${Date.now()}@example.com`;
const testPassword = "Test@123";

// Log c√°c bi·∫øn m√¥i tr∆∞·ªùng quan tr·ªçng
console.log("M√¥i tr∆∞·ªùng Firestore Tests: ", {
  NODE_ENV: process.env.NODE_ENV,
  USE_MOCK_DATA: process.env.USE_MOCK_DATA,
  FIREBASE_PROJECT: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
});

async function testFirestore() {
  try {
    console.log("üîç B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ Firestore...");

    // X√°c ƒë·ªãnh User ID d·ª±a v√†o m√¥i tr∆∞·ªùng
    let userId = "mock-user-id";

    // N·∫øu s·ª≠ d·ª•ng Firebase th·∫≠t, ƒëƒÉng k√Ω v√† ƒëƒÉng nh·∫≠p
    if (!useMockData) {
      console.log("‚ÑπÔ∏è S·ª≠ d·ª•ng Firestore th·∫≠t");
      try {
        // ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
        const user = await registerUser(
          testEmail,
          testPassword,
          "Ng∆∞·ªùi d√πng test Firestore"
        );
        userId = user.uid;
        console.log(`‚úÖ ƒêƒÉng k√Ω ng∆∞·ªùi d√πng th√†nh c√¥ng v·ªõi ID: ${userId}`);
      } catch (authError) {
        // N·∫øu t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i, th·ª≠ ƒëƒÉng nh·∫≠p
        console.log("‚ÑπÔ∏è T√†i kho·∫£n c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i, th·ª≠ ƒëƒÉng nh·∫≠p...");
        const user = await loginWithEmail(testEmail, testPassword);
        userId = user.uid;
        console.log(`‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi ID: ${userId}`);
      }
    } else {
      console.log("‚ÑπÔ∏è S·ª≠ d·ª•ng mock data cho Firestore");
    }

    // B∆∞·ªõc 1: L·∫•y danh s√°ch giao d·ªãch hi·ªán t·∫°i
    const initialTransactions = await getUserTransactions(userId);
    console.log(`‚úÖ L·∫•y ${initialTransactions.length} giao d·ªãch hi·ªán c√≥`);

    // B∆∞·ªõc 2: Th√™m giao d·ªãch m·ªõi
    const newTransaction: Omit<Transaction, "id"> = {
      userId: userId,
      amount: 75000,
      description: "Giao d·ªãch test Firestore",
      category: "food",
      date: new Date(),
      isRecurring: false,
    };

    const addedTx = await addTransaction(newTransaction);
    console.log(`‚úÖ Th√™m giao d·ªãch m·ªõi th√†nh c√¥ng: ${addedTx.id}`);

    // B∆∞·ªõc 3: L·∫•y chi ti·∫øt giao d·ªãch
    const txDetail = await getTransaction(addedTx.id!);
    console.log(
      `‚úÖ L·∫•y chi ti·∫øt giao d·ªãch: ${txDetail.description} - ${txDetail.amount}`
    );

    // B∆∞·ªõc 4: C·∫≠p nh·∫≠t giao d·ªãch
    await updateTransaction(addedTx.id!, { amount: 100000 });
    console.log("‚úÖ C·∫≠p nh·∫≠t giao d·ªãch th√†nh c√¥ng");

    // B∆∞·ªõc 5: L·∫•y danh s√°ch giao d·ªãch sau c·∫≠p nh·∫≠t
    const updatedTransactions = await getUserTransactions(userId);
    console.log(`‚úÖ Sau c·∫≠p nh·∫≠t c√≥ ${updatedTransactions.length} giao d·ªãch`);

    // B∆∞·ªõc 6: X√≥a giao d·ªãch
    await deleteTransaction(addedTx.id!);
    console.log("‚úÖ X√≥a giao d·ªãch th√†nh c√¥ng");

    // B∆∞·ªõc 7: Ki·ªÉm tra sau khi x√≥a
    const finalTransactions = await getUserTransactions(userId);
    console.log(`‚úÖ Sau khi x√≥a c√≤n ${finalTransactions.length} giao d·ªãch`);

    console.log("üéâ Ki·ªÉm th·ª≠ Firestore ho√†n t·∫•t!");
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm th·ª≠ Firestore:", error);

    // N·∫øu th·∫•t b·∫°i v·ªõi Firebase th·∫≠t, th·ª≠ l·∫°i v·ªõi mock
    if (!useMockData) {
      console.log("Th·ª≠ l·∫°i v·ªõi mock data...");
      process.env.USE_MOCK_DATA = "true";
      await testFirestore();
    }
  }
}

testFirestore();
