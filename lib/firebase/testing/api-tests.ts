import fetch from "node-fetch";
import { loginWithEmail, registerUser } from "./firebase-auth-adapter";

// Ki·ªÉm tra xem c√≥ s·ª≠ d·ª•ng mock hay kh√¥ng
const useMockAPI = process.env.USE_MOCK_API === "true";
const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000";

// Email v√† m·∫≠t kh·∫©u test
const testEmail = `api_test_${Date.now()}@example.com`;
const testPassword = "Test@123";

console.log("M√¥i tr∆∞·ªùng API Tests: ", {
  BASE_URL: baseUrl,
  USE_MOCK_API: useMockAPI,
  NODE_ENV: process.env.NODE_ENV,
});

// Test gi·∫£ l·∫≠p API
async function mockAPITest() {
  console.log("‚úÖ [MOCK] API transactions tr·∫£ v·ªÅ danh s√°ch 5 giao d·ªãch");
  console.log(
    "‚úÖ [MOCK] API classify-transaction ph√¢n lo·∫°i 'Mua c√† ph√™' th√†nh 'food'"
  );
  return true;
}

// Test API th·∫≠t
async function realAPITest() {
  let userId = "";
  console.log("‚ÑπÔ∏è S·ª≠ d·ª•ng API th·∫≠t v·ªõi baseUrl:", baseUrl);

  try {
    // ƒêƒÉng k√Ω ho·∫∑c ƒëƒÉng nh·∫≠p ng∆∞·ªùi d√πng ƒë·ªÉ c√≥ userId
    try {
      console.log(`ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi v·ªõi email: ${testEmail}`);
      const user = await registerUser(
        testEmail,
        testPassword,
        "Ng∆∞·ªùi d√πng test API"
      );
      userId = user.uid;
      console.log(`‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng, userId: ${userId}`);
    } catch (authError) {
      console.log("‚ÑπÔ∏è T√†i kho·∫£n c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i, th·ª≠ ƒëƒÉng nh·∫≠p...");
      const user = await loginWithEmail(testEmail, testPassword);
      userId = user.uid;
      console.log(`‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng, userId: ${userId}`);
    }

    // Ki·ªÉm th·ª≠ API transactions
    console.log(`G·ªçi API transactions v·ªõi userId: ${userId}`);
    const transactionsURL = `${baseUrl}/api/transactions?userId=${userId}`;
    const txResponse = await fetch(transactionsURL);

    if (txResponse.ok) {
      const transactions = await txResponse.json();
      console.log(
        `‚úÖ API transactions th√†nh c√¥ng, nh·∫≠n ƒë∆∞·ª£c ${transactions.length} giao d·ªãch`
      );
    } else {
      console.error(
        `‚ùå API transactions th·∫•t b·∫°i v·ªõi status: ${txResponse.status}`
      );
      console.error(await txResponse.text());
    }

    // Ki·ªÉm th·ª≠ API ph√¢n lo·∫°i
    console.log("G·ªçi API classify-transaction");
    const classifyResponse = await fetch(
      `${baseUrl}/api/classify-transaction`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          description: "Mua c√† ph√™ Starbucks",
          userId: userId,
        }),
      }
    );

    if (classifyResponse.ok) {
      const classification = await classifyResponse.json();
      console.log(
        `‚úÖ API classify-transaction th√†nh c√¥ng, k·∫øt qu·∫£: ${classification.category}`
      );
    } else {
      console.error(
        `‚ùå API classify-transaction th·∫•t b·∫°i v·ªõi status: ${classifyResponse.status}`
      );
      console.error(await classifyResponse.text());
    }

    return true;
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm th·ª≠ API:", error);
    return false;
  }
}

async function testAPI() {
  console.log("üîç B·∫Øt ƒë·∫ßu ki·ªÉm th·ª≠ API...");

  try {
    if (useMockAPI) {
      console.log("‚ÑπÔ∏è S·ª≠ d·ª•ng mock API");
      await mockAPITest();
    } else {
      await realAPITest();
    }

    console.log("üéâ Ki·ªÉm th·ª≠ API ho√†n t·∫•t!");
  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm th·ª≠ API:", error);

    if (!useMockAPI) {
      console.log("Th·ª≠ l·∫°i v·ªõi mock API...");
      process.env.USE_MOCK_API = "true";
      await testAPI();
    }
  }
}

testAPI();
