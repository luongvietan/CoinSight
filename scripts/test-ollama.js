/**
 * Script ki·ªÉm tra k·∫øt n·ªëi t·ªõi Ollama
 *
 * Usage: npm run test-ollama
 */

// ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env.local
require("dotenv").config({ path: "CoinSight/.env.local" });

const OLLAMA_API_URL = process.env.OLLAMA_API_URL || "http://localhost:11434";
const OLLAMA_MODEL = process.env.OLLAMA_MODEL || "llama3.2";

// console.log(`S·ª≠ d·ª•ng m√¥ h√¨nh: ${OLLAMA_MODEL}`);

async function testOllamaConnection() {
  // console.log(`üîç Ki·ªÉm tra k·∫øt n·ªëi t·ªõi Ollama API: ${OLLAMA_API_URL}`);

  try {
    const response = await fetch(`${OLLAMA_API_URL}/api/version`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (!response.ok) {
      throw new Error(`API responded with status ${response.status}`);
    }

    const data = await response.json();
    // console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng t·ªõi Ollama API!`);
    // console.log(`üìÑ Phi√™n b·∫£n Ollama: ${data.version}`);

    // Ki·ªÉm tra model
    await testOllamaModel();
  } catch (error) {
    // console.error(`‚ùå L·ªói k·∫øt n·ªëi t·ªõi Ollama API: ${error.message}`);
    // console.log(`
    // üí° ƒê·ªÉ kh·∫Øc ph·ª•c:
    // 1. ƒê·∫£m b·∫£o Ollama ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t (https://ollama.com/download)
    // 2. ƒê·∫£m b·∫£o Ollama ƒëang ch·∫°y tr√™n m√°y c·ªßa b·∫°n
    // 3. Ki·ªÉm tra c·∫•u h√¨nh OLLAMA_API_URL trong file .env.local (m·∫∑c ƒë·ªãnh: http://localhost:11434)
    // `);
  }
}

async function testOllamaModel() {
  // console.log(`üîç Ki·ªÉm tra m√¥ h√¨nh "${OLLAMA_MODEL}"...`);

  try {
    const response = await fetch(`${OLLAMA_API_URL}/api/generate`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: OLLAMA_MODEL,
        prompt: "Xin ch√†o!",
        stream: false,
      }),
    });

    if (!response.ok) {
      throw new Error(`API responded with status ${response.status}`);
    }

    const data = await response.json();
    // console.log(`‚úÖ M√¥ h√¨nh "${OLLAMA_MODEL}" ho·∫°t ƒë·ªông t·ªët!`);
    // console.log(
    //   `üìù Ph·∫£n h·ªìi th·ª≠ nghi·ªám: "${data.response.substring(0, 50)}..."`
    // );

    // console.log(`
    // ‚ú® T·∫•t c·∫£ ki·ªÉm tra TH√ÄNH C√îNG! Ollama ƒë√£ s·∫µn s√†ng cho t√≠nh nƒÉng AI Insights.
    //    B·∫°n c√≥ th·ªÉ truy c·∫≠p ·ª©ng d·ª•ng CoinSight v√† s·ª≠ d·ª•ng AI Insights v·ªõi m√¥ h√¨nh local.
    // `);
  } catch (error) {
    // console.error(
    //   `‚ùå L·ªói khi s·ª≠ d·ª•ng m√¥ h√¨nh "${OLLAMA_MODEL}": ${error.message}`
    // );
    // console.log(`
    // üí° ƒê·ªÉ kh·∫Øc ph·ª•c:
    // 1. ƒê·∫£m b·∫£o m√¥ h√¨nh "${OLLAMA_MODEL}" ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t:
    //    Ch·∫°y l·ªánh: ollama pull ${OLLAMA_MODEL}
    // 2. Ki·ªÉm tra c·∫•u h√¨nh OLLAMA_MODEL trong file .env.local
    // 3. Th·ª≠ s·ª≠ d·ª•ng m√¥ h√¨nh kh√°c (v√≠ d·ª•: mistral, gemma:7b, phi)
    // `);
  }
}

// Execute
testOllamaConnection();
